

rule cc 
    command = $cc $cflags -c $in -o $out

rule ld
    command = $ld $ldflags $in -o $out

rule as
    command = $as $in -o $out

# C

build out/limine.o: cc src/bootstubs/limine.c
build out/tar.o: cc src/fs/tar.c
build out/zero.o: cc src/fs/zero.c
build out/kmain.o: cc src/kmain.c
build out/alloc.o: cc src/alloc.c
build out/liballoc.o: cc src/liballoc.c
build out/locker.o: cc src/locker.c
build out/log.o: cc src/log.c
build out/pmm.o: cc src/pmm.c
build out/string.o: cc src/string.c
build out/terminal.o: cc src/terminal.c
build out/vfs.o: cc src/vfs.c
build out/flanterm_fb.o: cc src/flanterm/backends/fb.c
build out/flanterm.o: cc src/flanterm/flanterm.c

build out/vmm-aarch64.o: cc src/arch/aarch64/vmm.c
build out/interrupts-aarch64.o: as src/arch/aarch64/interrupts.s

build out/vmm-rv64.o: cc src/arch/rv64/vmm.c
build out/interrupts-rv64.o: as src/arch/rv64/interrupts.s

build aarch64.elf: ld $
    out/limine.o out/tar.o out/zero.o $
    out/kmain.o out/alloc.o out/liballoc.o $
    out/locker.o out/log.o out/pmm.o $
    out/string.o out/terminal.o out/vfs.o $
    out/vmm-aarch64.o out/interrupts-aarch64.o out/flanterm_fb.o $
    out/flanterm.o

build rv64.elf: ld $
    out/limine.o out/tar.o out/zero.o $
    out/kmain.o out/alloc.o out/liballoc.o $
    out/locker.o out/log.o out/pmm.o $
    out/string.o out/terminal.o out/vfs.o $
    out/vmm-rv64.o out/interrupts-rv64.o out/flanterm_fb.o $
    out/flanterm.o
